{"version":3,"sources":["../src/controllers/Product.ts"],"names":[],"mappings":";;;;;;;;;;AACA,mCAAyC;AACzC,gCAA6B;AAC7B,0CAA8F;AAC9F,iDAA8C;AAC9C,+CAA4C;AAE5C;IACS,MAAM,CAAO,cAAc,CAAC,GAAY,EAAE,GAAa;;YAC5D,IAAI,QAAQ,GAAG,MAAM,iBAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACzD,QAAQ,GAAG,mBAAY,CAAC,QAAQ,CAAC,CAAC;YAClC,QAAQ,GAAG,gBAAS,CAAC,QAAQ,CAAC,CAAC;YAC/B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;KAAA;IAEM,MAAM,CAAO,cAAc,CAAC,GAAY,EAAE,GAAa;;YAC5D,MAAM,EAAE,GAAG,iBAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACnC,IAAI,cAAK,CAAC,EAAE,CAAC,EAAE;gBACb,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;aACjC;iBAAM;gBACL,MAAM,OAAO,GAAG,MAAM,iBAAO,CAAC,OAAO,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC;gBAC5C,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IAEM,MAAM,CAAO,oBAAoB,CAAC,GAAY,EAAE,GAAa;;YAClE,MAAM,QAAQ,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAC,CAAC,CAAC;YACtE,MAAM,OAAO,GAAG,MAAM,iBAAO,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAC,CAAC,CAAC;YAC7D,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpB,CAAC;KAAA;IAEM,MAAM,CAAO,aAAa,CAAC,GAAY,EAAE,GAAa;;YAC3D,MAAM,QAAQ,GAAG,MAAM,iBAAO,CAAC,IAAI,EAAE,CAAC;YACtC,GAAG,CAAC,IAAI,CAAC,uBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACvC,CAAC;KAAA;IAEM,MAAM,CAAO,aAAa,CAAC,GAAY,EAAE,GAAa;;YAC3D,MAAM,QAAQ,GAAG,MAAM,iBAAO,CAAC,IAAI,EAAE,CAAC;YACtC,GAAG,CAAC,IAAI,CAAC,uBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACvC,CAAC;KAAA;IAEM,MAAM,CAAO,OAAO,CAAC,GAAY,EAAE,GAAa;;YACrD,MAAM,GAAG,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC;YAClD,MAAM,mBAAmB,GAAG,MAAM,SAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1D,IAAI;gBACF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAClD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChB;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;aACpB;QACH,CAAC;KAAA;CACF;AA5CD,8CA4CC","file":"Product.js","sourcesContent":["import { Request, Response } from 'express';\nimport { isNaN, toNumber } from 'lodash';\nimport { App } from '../App';\nimport { addBestOffer, filterKebabsOnly, filterSteaksOnly, freeDrink } from '../helpers/util';\nimport { Category } from '../models/Category';\nimport { Product } from '../models/Product';\n\nexport class ProductController {\n  public static async getAllProducts(req: Request, res: Response): Promise<void> {\n    let products = await Product.find().populate('category');\n    products = addBestOffer(products);\n    products = freeDrink(products);\n    res.json(products);\n  }\n\n  public static async getProductById(req: Request, res: Response): Promise<void> {\n    const id = toNumber(req.params.id);\n    if (isNaN(id)) {\n      res.send('Id should be number');\n    } else {\n      const product = await Product.findOne({id});\n      res.json(product);\n    }\n  }\n\n  public static async getProductByCategory(req: Request, res: Response): Promise<void> {\n    const category = await Category.findOne({title: req.params.category});\n    const product = await Product.find({category: category._id});\n    res.json(product);\n  }\n\n  public static async getSteaksOnly(req: Request, res: Response): Promise<void> {\n    const products = await Product.find();\n    res.json(filterSteaksOnly(products));\n  }\n\n  public static async getKebabsOnly(req: Request, res: Response): Promise<void> {\n    const products = await Product.find();\n    res.json(filterKebabsOnly(products));\n  }\n\n  public static async getBeer(req: Request, res: Response): Promise<void> {\n    const uri = `${App.config.get('beercomua')}/beer`;\n    const beerServiceResponse = await App.httpClient.get(uri);\n    try {\n      const body = JSON.parse(beerServiceResponse.body);\n      res.json(body);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n}\n"]}