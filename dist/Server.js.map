{"version":3,"sources":["../src/Server.ts"],"names":[],"mappings":"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","file":"Server.js","sourcesContent":["import * as bodyParser from 'body-parser';\nimport * as express from 'express';\nimport * as mongoose from 'mongoose';\n\nimport { App } from './App';\nimport { router } from './routes';\n\nexport class Server {\n\n  private readonly expressApp: express.Application;\n  private httpServer: http.Server;\n\n  constructor() {\n    this.expressApp = express();\n    this.initMiddlewares();\n    this.initRoutes();\n    this.connectToDB()\n      .then(() => App.logger.info('Successfully connected to DB'))\n      .catch((err) => App.logger.info('Connection to db has been failed', err));\n  }\n\n  get express(): express.Application {\n    return this.expressApp;\n  }\n\n  public listen(port: number): void {\n    this.expressApp.on('listening', () => {\n      App.logger.info(`Listening on ${port}`);\n    });\n\n    this.httpServer = this.expressApp.listen(port);\n  }\n\n  public onError(callback: (error: NodeJS.ErrnoException) => void) {\n    this.expressApp.on('error', (error: NodeJS.ErrnoException) => {\n      if (error.syscall !== 'listen') {\n        throw error;\n      }\n      callback(error);\n    });\n  }\n\n  public close(callback?: Function): void {\n    this.httpServer.close(callback);\n    mongoose.connection.close();\n  }\n\n  /**\n   * http(s) request middleware\n   */\n  private initMiddlewares(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({extended: false}));\n    this.express.disable('etag');\n    this.express.use((req, res, next) => {\n      App.logger.info('request');\n\n      res.header('Access-Control-Allow-Origin', '*'); // dev only\n      res.header('Access-Control-Allow-Methods', 'OPTIONS,GET,PUT,POST,DELETE');\n      res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      if (req.method === 'OPTIONS') {\n        res.status(200).send();\n      } else {\n        next();\n      }\n    });\n  }\n\n  /**\n   * API main routes\n   */\n  private initRoutes(): void {\n    this.express.use(router);\n    this.express.use('/', (req, res) => {\n      res.status(404).send({error: 'path doesnt exist'});\n    });\n  }\n\n  private connectToDB(): Promise<void> {\n    const name = App.config.get('db:name');\n    const host = App.config.get('db:host');\n    const port = App.config.get('db:port');\n    const url = `mongodb://${host}:${port}/${name}`;\n    App.logger.info(`Connecting to ${url}`);\n\n    return new Promise((resolve, reject) => {\n      mongoose.connect(url);\n      mongoose.connection.on('error', () => {\n        App.logger.info('MongoDB connection error. Please make sure MongoDB is running.');\n        process.exit();\n      });\n\n      resolve();\n    });\n  }\n}\n"]}